1. data_processor.py

input - 'jds.jl' file
output - 'processed_jds' file

It is created for text preprocessing. The text is preprocressed by removing punctuations/redundant words (i.e. job_description), lowercasing and stemmming. It will generate a file named "processed_jds" after running. In "processed_jds" file, each line consists of words seperated by space, which denote a whole sentence in the orginal raw file. 

'processed_jds' file template:
particip in the entir 3d manufactur softwar life cycl from concept to releas
develop and maintain autom cad cam system for medic devic mass product
build softwar solut for stereolithographi 3d print cnc mill laser mark laser trim and x ray tomographi
creat numer geometr algorithm and implement in c++
interact with custom and our intern test depart to improv the product
help defin technic requir for product
help defin user accept test scenario

-------------------------------------------------------------
2. ngram_counter.py

input - processed_jds| threshold | n_for_ngram
output - 'temp_result' folder

There are three inputs from the system argument: 
1. processed_jds: the file name that generated by the previous module.
2. threshold: for filtering n-grams by their frequencies. Here the threshold is set as 20.
3. n_for_ngram: the number of words in a n-gram. Here the n_for_ngram is set as 4.

This module is running on Pyspark platform. It reads "processed_jds" file, generates the n-grams, counts the frequency of n-grams and filter out n-grams with frequency>=threshold. Results are stored in 'temp_result' folder. The folder contains the results of the n-grams frequencies generated by Pyspark, which are partioned in several files.


--------------------------------------------------------------
 3. ngram_frequency.py

input - 'temp_result' folder
output - 'ngram_frequency' file

'ngram_frequency' file combines the results in 'temp_result' folder. In the file, each line represents a tuple shown as (n-gram, frequency)

'ngram_frequency' file template:
((u'parson', u'deliv', u'a', u'better'), 22)
((u'cloud', u'compani', u'that', u'enabl'), 73)
((u'they', u'meet', u'the', u'minimum'), 32)
((u'to', u'help', u'identifi', u'and'), 21)
((u'have', u'appli', u'for', u'a'), 99)
((u'cloud', u'expert', u'on', u'the'), 124)
((u'comput', u'skill', u'ms', u'offic'), 31)
((u'proscrib', u'under', u'applic', u'feder'), 31)





   
